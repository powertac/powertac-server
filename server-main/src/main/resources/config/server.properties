# If you want to modify any of these parameters, simply uncomment the
# relevant line and adjust the value. Or copy elements into your own
# config file and hand it to the server on startup.

# Name of bootstrap data file. Used for output in bootstrap mode, input
# for sim mode.
server.bootstrapDataFile = boot-data.xml

# Filename suffix for server logfiles. The server will generate two logfiles
# as it runs, named "powertac-suffix.trace" and "powertac-suffix.state"
server.logfileSuffix = default

# Real-time length of a bootstrap timeslot in milliseconds. The server can run
# much faster without attached broker agents.
# Values less than 300 may cause trouble.
server.competitionControlService.bootstrapTimeslotMillis = 400

# Maximum time in milliseconds to wait for broker logins in sim mode.
# A value of 0 means no timeout - the server will wait forever for the
# last broker to log in. 
server.competitionControlService.loginTimeout = 0

# If true, then org.powertac classnames are abbreviated in the state log
server.logService.abbreviateClassnames = false

# Depth of stack trace on exception
server.competitionControlService.stackTraceDepth = 6

# Time interval between last outgoing server message and beginning
# of next timeslot in sim mode, as a portion of total timeslot duration.
server.simulationClockControl.agentShare = 0.6

# Network address of the message queue broker for this server
server.jmsManagementService.jmsBrokerUrl = tcp://localhost:61616

# Weather service Configuration
# Location of weather server
server.weatherService.serverUrl = https://weather.powertac.org:8080/WeatherServer/faces/index.xhtml

# Location of weather data
server.weatherService.weatherLocation = rotterdam

# Timeslot interval to make requests
server.weatherService.weatherReqInterval = 24

# If network calls to weather server should block until finished
server.weatherService.blocking = false

# Length of forecasts (in hours)
server.weatherService.forecastHorizon = 24

# ----- competition -----
# Start date/time for the beginning of the simulation scenario. Note that this
# is actually the start of the bootstrap period. Format is yyyy-mm-dd, and the
# clock always starts at midnight. Timezone is not supported. Can be set only
# bootstrap mode.
common.competition.simulationBaseTime = 2009-10-10

# Timezone offset from UTC in hours for sim locale
common.competition.timezoneOffset = -6

# Approximate latitude in degrees north for sim locale
common.competition.latitude = 45

# Number of timeslots during bootstrap mode for which data is collected
common.competition.bootstrapTimeslotCount = 336

# Number of timeslots at the beginning of bootstrap mode for which data
# is discarded
common.competition.bootstrapDiscardedTimeslots = 24

# Minimum number of timeslots in simulation, not including the bootstrap
# period
common.competition.minimumTimeslotCount = 1400

# Expected number of timeslots for a simulation. Must be >= minimumTimeslotCount
common.competition.expectedTimeslotCount = 1440

# Length of individual timeslot, in simulation minutes. Can be set only
# in bootstrap mode
common.competition.timeslotLength = 60

# Real-time length of a simulation timeslot in seconds. Note that if the
# specified value does not evenly divide into the timeslotLength, the 
# actual value will be the next larger integer that is a factor of 60.
common.competition.simulationTimeslotSeconds = 5

# Number of timeslots simultaneously open for trading. Can be set only in
# bootstrap mode.
common.competition.timeslotsOpen = 24

# Number of timeslots closed for trading at any time, including the
# current timeslot. Can be set only in bootstrap mode.
common.competition.deactivateTimeslotsAhead = 1

# Minimum order quantity for the wholesale market in MWh.
common.competition.minimumOrderQuantity = 0.01

# ----- accounting -----
# Interest rate on bank deposits. If not set explicitly, the value will be
# chosen randomly between minInterest and maxInterest
#accounting.accountingService.minInterest = 0.04
#accounting.accountingService.maxInterest = 0.12
#accounting.accountingService.bankInterest = 0.06

# ----- genco -----
# coefficients, min-quantity
#genco.cpGenco.coefficients = 0.005, 0.02, 14.0
#genco.cpGenco.minQuantity = 1500.0

# ----- tariff market -----
# Fee for new tariff publication. Range is [-1000 -5000]
tariffmarket.tariffMarketService.minPublicationFee = -1000.0
tariffmarket.tariffMarketService.maxPublicationFee = -5000.0
# Set the fee directly to override random selection
#tariffMarketService.publicationFee=-100.0

# Fee for revoking a tariff. Range is [-100 -500]
#tariffmarket.TariffMarketService.minRevocationFee = -100.0
#tariffmarket.TariffMarketService.maxRevocationFee = -500.0
# Set the fee directly to override random selection
#tariffmarket.TariffMarketService.revocationFee = -50.0

# Number of timeslots between tariff publication events. Default is 6
#tariffmarket.tariffMarketService.publicationInterval = 6

# Number of timeslots from the first timeslot to delay the first
# publication event. Default is 1. It does not work well to make this
# zero, because brokers will not have an opportunity to post tariffs
# in timeslot 0.
tariffmarket.tariffMarketService.publicationOffset = 1

# ----- wholesale market ------
# Proportion of market surplus that goes to the seller. Default is 0.5.
#auctioneer.auctionService.sellerSurplusRatio = 0.5

# Default margin when setting a clearing price between a limit order and
# a market order. Default is 0.2.
auctioneer.auctionService.defaultMargin = 0.2

# Default price/mwh when matching only market orders
#auctioneer.auctionService.defaultClearingPrice = 40.0

# Initial and final market position limits
auctioneer.auctionService.mktPosnLimitInitial = 180.0
auctioneer.auctionService.mktPosnLimitFinal = 200.0

# -------------- Balancing market -------------------
# Spot price/mwh used if unavailable from wholesale market
balancemkt.balancingMarketService.defaultSpotPrice = 75.0

# Balancing settlement processing: blank for no controllable capacity,
# Use "static" for per-timeslot processing of balancing orders.
# Use "simple" for no processing of balancing orders.
balancemkt.balancingMarketService.settlementProcess = static

# Premium and fee over spot price for balancing energy
balancemkt.balancingMarketService.rmPremium = 2.0

# Customer discount factors for regulation rates
common.tariffEvaluationHelper.upregHalf = 4.3
common.tariffEvaluationHelper.upregSlope = 3.0
common.tariffEvaluationHelper.downregHalf = 0.75
common.tariffEvaluationHelper.downregSlope = 16.0

# Slope of regulating power cost for positive and negative quantities
# Units are $/kwh, 
balancemkt.balancingMarketService.pPlusPrime = 0.000001
balancemkt.balancingMarketService.pMinusPrime = -0.000001

# -------------- Distribution utility -------------------
# Turn off transport fee
distributionutility.distributionUtilityService.useTransportFee = false

# High and Low end of distribution fee range
distributionutility.distributionUtilityService.distributionFeeMax = -0.03
distributionutility.distributionUtilityService.distributionFeeMin = -0.003

# Distribution fee: overrides random value selection
#distributionutility.distributionUtilityService.distributionFee = -0.01

# Turn on capacity fees
distributionutility.distributionUtilityService.useCapacityFee = true
#distributionutility.distributionUtilityService.assessmentInterval = 168
#distributionutility.distributionUtilityService.assessmentCount = 3
#distributionutility.distributionUtilityService.stdCoefficient = 1.2
#distributionutility.distributionUtilityService.feePerPoint = -18.0

# Turn on meter fees
distributionutility.distributionUtilityService.useMeterFee = true
#distributionutility.distributionUtilityService.msmall = -0.015
#distributionutility.distributionUtilityService.mLarge = -0.05


# --------------- Default broker -------------------
# Fixed price/kwh for default consumption tariff
du.defaultBrokerService.consumptionRate = -0.50

# Fixed price/kwh for default production tariff
du.defaultBrokerService.productionRate = 0.01

# Quantity to buy in day-ahead market before seeing actual customer data
du.defaultBrokerService.initialBidKWh = 1000.0

# Initial limit price/mwh for bids in day-ahead market
du.defaultBrokerService.buyLimitPriceMax = -5.0

# Final limit price/mwh for bids in day-ahead market
du.defaultBrokerService.buyLimitPriceMin = -100.0

# Initial limit price/mwh for asks in day-ahead market
du.defaultBrokerService.sellLimitPriceMax = 30.0

# Final limit price/mwh for asks in day-ahead market
du.defaultBrokerService.sellLimitPriceMin = 0.1

# --------------- Household Customer -------------------
# Name of configuration file of the household customer. Used as input
# for sim mode.
householdcustomer.householdCustomerService.configFile1 = VillageType1.properties

# --------------- Office Complex Customer -------------------
# Name of configuration file of the office complex customer. Used as input
# for sim mode.
officecomplexcustomer.officeComplexCustomerService.configFile1 = OfficeComplexType1.properties

